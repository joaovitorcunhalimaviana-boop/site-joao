console.log('üîç Verificando m√©dico padr√£o...')

try {
  const { PrismaClient } = require('@prisma/client')
  const prisma = new PrismaClient()
  
  async function checkDoctor() {
    console.log('üë®‚Äç‚öïÔ∏è Buscando m√©dicos...')
    const doctors = await prisma.user.findMany({
      where: { role: 'DOCTOR' }
    })
    console.log('Total de m√©dicos:', doctors.length)
    
    doctors.forEach((doctor, index) => {
      console.log(`M√©dico ${index + 1}:`, {
        id: doctor.id,
        name: doctor.name,
        email: doctor.email,
        role: doctor.role
      })
    })
    
    // Verificar se o m√©dico padr√£o existe (Dr. Jo√£o Vitor Viana)
    const defaultDoctor = await prisma.user.findUnique({
      where: { id: 'cmgl48lmp0000vddgzfjbwjoy' }
    })
    
    if (defaultDoctor) {
      console.log('‚úÖ M√©dico padr√£o encontrado:', defaultDoctor)
    } else {
      console.log('‚ùå M√©dico padr√£o N√ÉO encontrado!')
      
      // Criar m√©dico padr√£o se n√£o existir
      console.log('üîß Criando m√©dico padr√£o...')
      const newDoctor = await prisma.user.create({
        data: {
          id: 'cmgl48lmp0000vddgzfjbwjoy',
          name: 'Dr. Jo√£o Vitor Viana',
          email: 'joao@clinica.com',
          password: '$2b$10$defaulthashedpassword',
          role: 'DOCTOR',
          isActive: true
        }
      })
      console.log('‚úÖ M√©dico padr√£o criado:', newDoctor)
    }
    
    await prisma.$disconnect()
    console.log('‚úÖ Verifica√ß√£o conclu√≠da!')
  }
  
  checkDoctor().catch(console.error)
} catch (error) {
  console.error('‚ùå Erro:', error.message)
}