import { NextRequest, NextResponse } from 'next/server'
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

export async function POST(request: NextRequest) {
  try {
    // Verificar se √© ambiente de produ√ß√£o
    if (process.env.NODE_ENV !== 'production') {
      return NextResponse.json(
        { error: 'Este endpoint s√≥ funciona em produ√ß√£o' },
        { status: 403 }
      )
    }

    // Verificar token de autoriza√ß√£o simples
    const authHeader = request.headers.get('authorization')
    if (authHeader !== 'Bearer clear-all-data-2024') {
      return NextResponse.json(
        { error: 'Token de autoriza√ß√£o inv√°lido' },
        { status: 401 }
      )
    }

    console.log('üßπ Iniciando limpeza dos dados de produ√ß√£o...')
    
    // Deletar dados em ordem (respeitando foreign keys)
    console.log('üóëÔ∏è Deletando prontu√°rios m√©dicos...')
    const deletedRecords = await prisma.medicalRecord.deleteMany({})
    console.log(`‚úÖ ${deletedRecords.count} prontu√°rios deletados`)
    
    console.log('üóëÔ∏è Deletando agendamentos...')
    const deletedAppointments = await prisma.appointment.deleteMany({})
    console.log(`‚úÖ ${deletedAppointments.count} agendamentos deletados`)
    
    console.log('üóëÔ∏è Deletando pacientes m√©dicos...')
    const deletedPatients = await prisma.medicalPatient.deleteMany({})
    console.log(`‚úÖ ${deletedPatients.count} pacientes deletados`)
    
    console.log('üóëÔ∏è Deletando contatos de comunica√ß√£o...')
    const deletedContacts = await prisma.communicationContact.deleteMany({})
    console.log(`‚úÖ ${deletedContacts.count} contatos deletados`)
    
    console.log('üóëÔ∏è Deletando inscri√ß√µes de newsletter...')
    const deletedNewsletter = await prisma.newsletterSubscription.deleteMany({})
    console.log(`‚úÖ ${deletedNewsletter.count} inscri√ß√µes de newsletter deletadas`)
    
    // Verificar contagens finais
    console.log('üìä Verificando contagens finais...')
    const finalCounts = {
      patients: await prisma.medicalPatient.count(),
      appointments: await prisma.appointment.count(),
      records: await prisma.medicalRecord.count(),
      contacts: await prisma.communicationContact.count(),
      newsletter: await prisma.newsletterSubscription.count(),
      users: await prisma.user.count()
    }
    
    const result = {
      success: true,
      message: 'Limpeza conclu√≠da com sucesso',
      deleted: {
        patients: deletedPatients.count,
        appointments: deletedAppointments.count,
        records: deletedRecords.count,
        contacts: deletedContacts.count,
        newsletter: deletedNewsletter.count
      },
      finalCounts,
      isClean: finalCounts.patients === 0 && finalCounts.appointments === 0 && finalCounts.records === 0
    }
    
    console.log('‚úÖ LIMPEZA CONCLU√çDA COM SUCESSO!')
    console.log('üéâ O banco de dados est√° limpo e pronto para uso em produ√ß√£o')
    
    return NextResponse.json(result)
    
  } catch (error) {
    console.error('‚ùå Erro durante a limpeza:', error)
    return NextResponse.json(
      { 
        error: 'Erro interno do servidor',
        details: error instanceof Error ? error.message : 'Erro desconhecido'
      },
      { status: 500 }
    )
  } finally {
    await prisma.$disconnect()
  }
}

// M√©todo GET para verificar status
export async function GET() {
  try {
    const counts = {
      patients: await prisma.medicalPatient.count(),
      appointments: await prisma.appointment.count(),
      records: await prisma.medicalRecord.count(),
      contacts: await prisma.communicationContact.count(),
      newsletter: await prisma.newsletterSubscription.count(),
      users: await prisma.user.count()
    }
    
    return NextResponse.json({
      environment: process.env.NODE_ENV,
      counts,
      isEmpty: counts.patients === 0 && counts.appointments === 0 && counts.records === 0
    })
  } catch (error) {
    return NextResponse.json(
      { error: 'Erro ao verificar dados' },
      { status: 500 }
    )
  } finally {
    await prisma.$disconnect()
  }
}