#!/usr/bin/env tsx

/**
 * SCRIPT DE TESTE DE CONEX√ÉO POSTGRESQL
 * 
 * Este script testa a conex√£o com o banco PostgreSQL
 * antes de executar a migra√ß√£o completa.
 */

import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function testConnection() {
  console.log('üîç TESTANDO CONEX√ÉO COM POSTGRESQL')
  console.log('=' .repeat(50))
  
  try {
    // Testar conex√£o b√°sica
    console.log('‚è≥ Conectando ao banco...')
    await prisma.$connect()
    console.log('‚úÖ Conex√£o estabelecida com sucesso!')
    
    // Testar query simples
    console.log('‚è≥ Testando query b√°sica...')
    const result = await prisma.$queryRaw`SELECT version()`
    console.log('‚úÖ Query executada:', result)
    
    // Verificar se as tabelas existem (ap√≥s migra√ß√£o)
    try {
      console.log('‚è≥ Verificando tabelas...')
      const tables = await prisma.$queryRaw`
        SELECT table_name 
        FROM information_schema.tables 
        WHERE table_schema = 'public'
        ORDER BY table_name
      `
      console.log('üìä Tabelas encontradas:', tables)
    } catch (error) {
      console.log('‚ÑπÔ∏è  Tabelas ainda n√£o criadas (normal antes da migra√ß√£o)')
    }
    
    console.log('=' .repeat(50))
    console.log('üéâ TESTE DE CONEX√ÉO CONCLU√çDO COM SUCESSO!')
    
  } catch (error) {
    console.error('üí• ERRO DE CONEX√ÉO:', error)
    console.log('\nüîß POSS√çVEIS SOLU√á√ïES:')
    console.log('1. Verificar se DATABASE_URL est√° correta no .env')
    console.log('2. Verificar se o PostgreSQL est√° rodando no Railway')
    console.log('3. Verificar conectividade de rede')
    process.exit(1)
  } finally {
    await prisma.$disconnect()
  }
}

// Executar teste
if (require.main === module) {
  testConnection()
}

export { testConnection }