// Script para limpar todos os dados de teste do sistema
// Remove pacientes, agendamentos e prontu√°rios m√©dicos

const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function clearAllTestData() {
  try {
    console.log('üßπ Iniciando limpeza de dados de teste...')
    
    // 1. Deletar todos os agendamentos
    console.log('üìÖ Removendo agendamentos...')
    const deletedAppointments = await prisma.appointment.deleteMany({})
    console.log(`‚úÖ ${deletedAppointments.count} agendamentos removidos`)
    
    // 2. Deletar todos os prontu√°rios m√©dicos
    console.log('üìã Removendo prontu√°rios m√©dicos...')
    const deletedMedicalRecords = await prisma.medicalRecord.deleteMany({})
    console.log(`‚úÖ ${deletedMedicalRecords.count} prontu√°rios m√©dicos removidos`)
    
    // 3. Deletar todos os pacientes m√©dicos
    console.log('üë• Removendo pacientes m√©dicos...')
    const deletedMedicalPatients = await prisma.medicalPatient.deleteMany({})
    console.log(`‚úÖ ${deletedMedicalPatients.count} pacientes m√©dicos removidos`)
    
    // 4. Deletar todos os contatos de comunica√ß√£o
    console.log('üìû Removendo contatos de comunica√ß√£o...')
    const deletedCommunicationContacts = await prisma.communicationContact.deleteMany({})
    console.log(`‚úÖ ${deletedCommunicationContacts.count} contatos de comunica√ß√£o removidos`)
    
    // 5. Deletar anexos m√©dicos se existirem
    try {
      console.log('üìé Removendo anexos m√©dicos...')
      const deletedAttachments = await prisma.medicalAttachment.deleteMany({})
      console.log(`‚úÖ ${deletedAttachments.count} anexos m√©dicos removidos`)
    } catch (error) {
      console.log('‚ÑπÔ∏è Tabela de anexos m√©dicos n√£o encontrada ou vazia')
    }
    
    // 6. Deletar consultas se existirem
    try {
      console.log('ü©∫ Removendo consultas...')
      const deletedConsultations = await prisma.consultation.deleteMany({})
      console.log(`‚úÖ ${deletedConsultations.count} consultas removidas`)
    } catch (error) {
      console.log('‚ÑπÔ∏è Tabela de consultas n√£o encontrada ou vazia')
    }
    
    // 7. Deletar cirurgias se existirem
    try {
      console.log('üè• Removendo cirurgias...')
      const deletedSurgeries = await prisma.surgery.deleteMany({})
      console.log(`‚úÖ ${deletedSurgeries.count} cirurgias removidas`)
    } catch (error) {
      console.log('‚ÑπÔ∏è Tabela de cirurgias n√£o encontrada ou vazia')
    }
    
    console.log('\nüéâ Limpeza completa! Todos os dados de teste foram removidos.')
    console.log('üìä Sistema pronto para uso em produ√ß√£o.')
    
  } catch (error) {
    console.error('‚ùå Erro durante a limpeza:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// Executar o script
clearAllTestData()
  .then(() => {
    console.log('‚úÖ Script executado com sucesso!')
    process.exit(0)
  })
  .catch((error) => {
    console.error('‚ùå Falha na execu√ß√£o do script:', error)
    process.exit(1)
  })