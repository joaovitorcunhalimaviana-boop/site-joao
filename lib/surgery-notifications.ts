// Sistema de Notifica√ß√µes de Cirurgia
// Notifica√ß√µes de v√©spera e follow-ups p√≥s-operat√≥rios via Telegram

import {
  loadNotificationConfig,
  isTelegramConfigured,
  withRetry,
  checkNotificationRateLimit,
  logNotification,
  handleNotificationError,
  sanitizeWhatsApp,
} from './notification-utils'

export interface SurgeryNotificationData {
  patientName: string
  patientWhatsapp: string
  surgeryDate: string // YYYY-MM-DD
  surgeryTime: string // HH:MM
  surgeryType: string
  surgeon: string
  hospital: string
  notes?: string
}

export interface PostOpFollowUpData {
  patientName: string
  patientWhatsapp: string
  surgeryDate: string
  surgeryType: string
  followUpDay: number // 1, 4, 7, 14
  painScaleRequired?: boolean
}

/**
 * Formatar data para exibi√ß√£o brasileira
 */
function formatDateForDisplay(dateString: string): string {
  const date = new Date(dateString + 'T00:00:00')
  return date.toLocaleDateString('pt-BR', {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  })
}

/**
 * Gerar link do WhatsApp para confirma√ß√£o de cirurgia
 */
function generateSurgeryWhatsAppLink(
  whatsapp: string,
  patientName: string,
  surgeryDate: string,
  surgeryTime: string,
  doctorName: string
): string {
  const message = encodeURIComponent(
    `Ol√° ${patientName}! üëã\n\n` +
    `Este √© um lembrete da sua cirurgia agendada para:\n` +
    `üìÖ ${surgeryDate}\n` +
    `‚è∞ ${surgeryTime}\n\n` +
    `Por favor, confirme sua presen√ßa respondendo esta mensagem.\n\n` +
    `Atenciosamente,\n${doctorName}`
  )
  return `https://wa.me/${whatsapp}?text=${message}`
}

/**
 * Gerar link do WhatsApp para follow-up p√≥s-operat√≥rio
 */
function generateFollowUpWhatsAppLink(
  whatsapp: string,
  patientName: string,
  followUpDay: number,
  surgeryType: string
): string {
  const dayMessages = {
    1: 'primeiro dia ap√≥s a cirurgia',
    4: 'quarto dia ap√≥s a cirurgia',
    7: 'uma semana ap√≥s a cirurgia',
    14: 'duas semanas ap√≥s a cirurgia'
  }

  const message = encodeURIComponent(
    `Ol√° ${patientName}! üëã\n\n` +
    `Como voc√™ est√° se sentindo no ${dayMessages[followUpDay as keyof typeof dayMessages]}?\n\n` +
    `Por favor, nos informe:\n` +
    `‚Ä¢ Como est√° sua dor (0-10)?\n` +
    `‚Ä¢ H√° algum sangramento?\n` +
    `‚Ä¢ Funcionamento intestinal normal?\n` +
    `‚Ä¢ Alguma preocupa√ß√£o?\n\n` +
    `Sua recupera√ß√£o √© importante para n√≥s! üè•`
  )
  return `https://wa.me/${whatsapp}?text=${message}`
}

/**
 * Enviar notifica√ß√£o de v√©spera de cirurgia via Telegram
 */
export async function sendSurgeryReminderNotification(
  surgeryData: SurgeryNotificationData
): Promise<{ success: boolean; error?: string }> {
  const config = loadNotificationConfig()

  // Validar configura√ß√£o
  if (!isTelegramConfigured(config)) {
    await logNotification({
      level: 'WARN',
      channel: 'telegram',
      notificationType: 'surgery_reminder',
      message: 'Telegram n√£o configurado - notifica√ß√£o de cirurgia n√£o enviada',
      timestamp: new Date().toISOString(),
    })
    return { success: false, error: 'Telegram n√£o configurado' }
  }

  // Verificar rate limit
  const rateLimitCheck = checkNotificationRateLimit('telegram_surgery', 5)
  if (!rateLimitCheck.allowed) {
    await logNotification({
      level: 'WARN',
      channel: 'telegram',
      notificationType: 'surgery_reminder',
      message: `Rate limit excedido. Tente novamente em ${rateLimitCheck.retryAfter}s`,
      timestamp: new Date().toISOString(),
    })
    return {
      success: false,
      error: `Rate limit excedido. Aguarde ${rateLimitCheck.retryAfter} segundos`,
    }
  }

  try {
    // Formatar data para exibi√ß√£o
    const formattedDate = formatDateForDisplay(surgeryData.surgeryDate)

    // Gerar link do WhatsApp
    const sanitizedWhatsApp = sanitizeWhatsApp(surgeryData.patientWhatsapp)
    const whatsappLink = generateSurgeryWhatsAppLink(
      sanitizedWhatsApp,
      surgeryData.patientName,
      formattedDate,
      surgeryData.surgeryTime,
      config.doctorName
    )

    // Criar mensagem do Telegram
    const telegramMessage =
      `üè• *LEMBRETE DE CIRURGIA - V√âSPERA*\n\n` +
      `üë§ *Paciente:* ${surgeryData.patientName}\n` +
      `üì± *WhatsApp:* ${surgeryData.patientWhatsapp}\n` +
      `üìÖ *Data:* ${formattedDate}\n` +
      `‚è∞ *Hor√°rio:* ${surgeryData.surgeryTime}\n` +
      `üî¨ *Tipo:* ${surgeryData.surgeryType}\n` +
      `üë®‚Äç‚öïÔ∏è *Cirurgi√£o:* ${surgeryData.surgeon}\n` +
      `üè• *Hospital:* ${surgeryData.hospital}\n` +
      (surgeryData.notes ? `üìù *Observa√ß√µes:* ${surgeryData.notes}\n` : '') +
      `\nüîó [üì± Confirmar via WhatsApp](${whatsappLink})\n\n` +
      `‚ö†Ô∏è *Lembrete:* Cirurgia agendada para amanh√£!`

    // Enviar mensagem via API do Telegram
    await withRetry(
      async () => {
        const response = await fetch(
          `https://api.telegram.org/bot${config.telegramBotToken}/sendMessage`,
          {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json; charset=utf-8',
            },
            body: JSON.stringify({
              chat_id: config.telegramChatId,
              text: telegramMessage,
              parse_mode: 'Markdown',
              disable_web_page_preview: false,
            }),
          }
        )

        if (!response.ok) {
          const errorData = await response.json().catch(() => ({}))
          throw new Error(
            `Erro na API do Telegram: ${response.status} - ${JSON.stringify(errorData)}`
          )
        }

        return response
      },
      {
        maxAttempts: config.retryAttempts || 3,
        delayMs: config.retryDelay || 2000,
        onRetry: (attempt, error) => {
          console.warn(
            `‚ö†Ô∏è Tentativa ${attempt} de enviar notifica√ß√£o de cirurgia falhou:`,
            error.message
          )
        },
      }
    )

    await logNotification({
      level: 'SUCCESS',
      channel: 'telegram',
      notificationType: 'surgery_reminder',
      recipient: config.telegramChatId,
      message: 'Notifica√ß√£o de v√©spera de cirurgia enviada com sucesso',
      metadata: {
        patientName: surgeryData.patientName,
        surgeryDate: surgeryData.surgeryDate,
        surgeryTime: surgeryData.surgeryTime,
        surgeryType: surgeryData.surgeryType,
      },
      timestamp: new Date().toISOString(),
    })

    return { success: true }
  } catch (error) {
    await handleNotificationError(
      error instanceof Error ? error : new Error(String(error)),
      {
        channel: 'telegram',
        notificationType: 'surgery_reminder',
        recipient: config.telegramChatId,
      }
    )

    return {
      success: false,
      error: error instanceof Error ? error.message : 'Erro desconhecido',
    }
  }
}

/**
 * Enviar notifica√ß√£o de follow-up p√≥s-operat√≥rio via Telegram
 */
export async function sendPostOpFollowUpNotification(
  followUpData: PostOpFollowUpData
): Promise<{ success: boolean; error?: string }> {
  const config = loadNotificationConfig()

  // Validar configura√ß√£o
  if (!isTelegramConfigured(config)) {
    await logNotification({
      level: 'WARN',
      channel: 'telegram',
      notificationType: 'postop_followup',
      message: 'Telegram n√£o configurado - notifica√ß√£o de follow-up n√£o enviada',
      timestamp: new Date().toISOString(),
    })
    return { success: false, error: 'Telegram n√£o configurado' }
  }

  // Verificar rate limit
  const rateLimitCheck = checkNotificationRateLimit('telegram_followup', 10)
  if (!rateLimitCheck.allowed) {
    return {
      success: false,
      error: `Rate limit excedido. Aguarde ${rateLimitCheck.retryAfter} segundos`,
    }
  }

  try {
    // Gerar link do WhatsApp para follow-up
    const sanitizedWhatsApp = sanitizeWhatsApp(followUpData.patientWhatsapp)
    const whatsappLink = generateFollowUpWhatsAppLink(
      sanitizedWhatsApp,
      followUpData.patientName,
      followUpData.followUpDay,
      followUpData.surgeryType
    )

    const dayMessages = {
      1: '1¬∫ DIA P√ìS-OPERAT√ìRIO',
      4: '4¬∫ DIA P√ìS-OPERAT√ìRIO',
      7: '7¬∫ DIA P√ìS-OPERAT√ìRIO (1 SEMANA)',
      14: '14¬∫ DIA P√ìS-OPERAT√ìRIO (2 SEMANAS)'
    }

    // Criar mensagem do Telegram
    const telegramMessage =
      `ü©∫ *FOLLOW-UP ${dayMessages[followUpData.followUpDay as keyof typeof dayMessages]}*\n\n` +
      `üë§ *Paciente:* ${followUpData.patientName}\n` +
      `üì± *WhatsApp:* ${followUpData.patientWhatsapp}\n` +
      `üî¨ *Cirurgia:* ${followUpData.surgeryType}\n` +
      `üìÖ *Data da Cirurgia:* ${formatDateForDisplay(followUpData.surgeryDate)}\n` +
      `üìä *Follow-up:* ${followUpData.followUpDay}¬∫ dia p√≥s-operat√≥rio\n\n` +
      `üîó [üì± Contatar via WhatsApp](${whatsappLink})\n\n` +
      `üìã *Avaliar:*\n` +
      `‚Ä¢ N√≠vel de dor (escala 0-10)\n` +
      `‚Ä¢ Presen√ßa de sangramento\n` +
      `‚Ä¢ Funcionamento intestinal\n` +
      `‚Ä¢ Outras preocupa√ß√µes`

    // Enviar mensagem via API do Telegram
    await withRetry(
      async () => {
        const response = await fetch(
          `https://api.telegram.org/bot${config.telegramBotToken}/sendMessage`,
          {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json; charset=utf-8',
            },
            body: JSON.stringify({
              chat_id: config.telegramChatId,
              text: telegramMessage,
              parse_mode: 'Markdown',
              disable_web_page_preview: false,
            }),
          }
        )

        if (!response.ok) {
          const errorData = await response.json().catch(() => ({}))
          throw new Error(
            `Erro na API do Telegram: ${response.status} - ${JSON.stringify(errorData)}`
          )
        }

        return response
      },
      {
        maxAttempts: config.retryAttempts || 3,
        delayMs: config.retryDelay || 2000,
      }
    )

    await logNotification({
      level: 'SUCCESS',
      channel: 'telegram',
      notificationType: 'postop_followup',
      recipient: config.telegramChatId,
      message: `Follow-up ${followUpData.followUpDay}¬∫ dia enviado com sucesso`,
      metadata: {
        patientName: followUpData.patientName,
        surgeryDate: followUpData.surgeryDate,
        followUpDay: followUpData.followUpDay,
      },
      timestamp: new Date().toISOString(),
    })

    return { success: true }
  } catch (error) {
    await handleNotificationError(
      error instanceof Error ? error : new Error(String(error)),
      {
        channel: 'telegram',
        notificationType: 'postop_followup',
        recipient: config.telegramChatId,
      }
    )

    return {
      success: false,
      error: error instanceof Error ? error.message : 'Erro desconhecido',
    }
  }
}

// Fun√ß√£o para gerar link do WhatsApp
function generateWhatsAppLink(phone: string, message: string): string {
  const cleanPhone = phone.replace(/\D/g, '')
  const encodedMessage = encodeURIComponent(message)
  return `https://wa.me/55${cleanPhone}?text=${encodedMessage}`
}

// Fun√ß√£o para criar mensagem Telegram com links WhatsApp manuais
export async function createTelegramWhatsAppLinks(
  surgeryData: SurgeryNotificationData,
  type: 'preop' | 'postop',
  followUpDay?: number
): Promise<string> {
  const patientPhone = surgeryData.patientWhatsapp
  const surgeryDate = formatDateForDisplay(surgeryData.surgeryDate)
  const surgeryTime = surgeryData.surgeryTime
  
  let whatsappMessage = ''
  let telegramMessage = ''
  
  if (type === 'preop') {
    whatsappMessage = `Ol√° ${surgeryData.patientName}! üëã

üè• *Lembrete de Cirurgia - V√©spera*

Sua cirurgia est√° agendada para *amanh√£*:
üìÖ Data: ${surgeryDate}
‚è∞ Hor√°rio: ${surgeryTime}
üî¨ Procedimento: ${surgeryData.surgeryType}

üìã *Orienta√ß√µes importantes:*
‚Ä¢ Jejum absoluto a partir das 22h de hoje
‚Ä¢ Tomar banho com sabonete antiss√©ptico
‚Ä¢ N√£o usar maquiagem, esmalte ou joias
‚Ä¢ Chegar ao hospital 1h antes do hor√°rio
‚Ä¢ Trazer documentos e exames

‚ùì D√∫vidas? Entre em contato conosco.

Desejamos uma excelente recupera√ß√£o! üôè`

    telegramMessage = `üè• *LINK WHATSAPP - V√âSPERA DE CIRURGIA*

üë§ *Paciente:* ${surgeryData.patientName}
üì± *Telefone:* ${patientPhone}
üìÖ *Cirurgia:* ${surgeryDate} √†s ${surgeryTime}
üî¨ *Procedimento:* ${surgeryData.surgeryType}

üì≤ *Link para enviar mensagem:*
${generateWhatsAppLink(patientPhone, whatsappMessage)}

‚ö†Ô∏è *Instru√ß√µes:*
1. Clique no link acima
2. Ser√° aberto o WhatsApp com a mensagem pronta
3. Revise a mensagem se necess√°rio
4. Envie para o paciente

#VesperaCirurgia #${surgeryData.patientName.replace(/\s+/g, '')}`
  } else {
    const followUpDayText = followUpDay === 1 ? '1¬∫ dia' : 
                           followUpDay === 4 ? '4¬∫ dia' : 
                           followUpDay === 7 ? '1 semana' : 
                           followUpDay === 14 ? '2 semanas' : `${followUpDay}¬∫ dia`
    
    whatsappMessage = `Ol√° ${surgeryData.patientName}! üëã

üè• *Follow-up P√≥s-Operat√≥rio - ${followUpDayText}*

Como voc√™ est√° se sentindo ap√≥s sua cirurgia?
üìÖ Cirurgia realizada: ${surgeryDate}
üî¨ Procedimento: ${surgeryData.surgeryType}

üìã *Gostar√≠amos de saber:*
‚Ä¢ Como est√° sua dor (0-10)?
‚Ä¢ H√° algum sangramento?
‚Ä¢ Como est√° sua alimenta√ß√£o?
‚Ä¢ Consegue se movimentar bem?
‚Ä¢ Alguma preocupa√ß√£o ou d√∫vida?

üì≤ Responda esta mensagem ou ligue para agendar uma consulta se necess√°rio.

Estamos acompanhando sua recupera√ß√£o! üôè`

    telegramMessage = `üè• *LINK WHATSAPP - FOLLOW-UP ${followUpDayText.toUpperCase()}*

üë§ *Paciente:* ${surgeryData.patientName}
üì± *Telefone:* ${patientPhone}
üìÖ *Cirurgia:* ${surgeryDate}
üî¨ *Procedimento:* ${surgeryData.surgeryType}
üìä *Follow-up:* ${followUpDayText} p√≥s-operat√≥rio

üì≤ *Link para enviar mensagem:*
${generateWhatsAppLink(patientPhone, whatsappMessage)}

‚ö†Ô∏è *Instru√ß√µes:*
1. Clique no link acima
2. Ser√° aberto o WhatsApp com a mensagem pronta
3. Revise a mensagem se necess√°rio
4. Envie para o paciente

#FollowUp${followUpDay}Dias #${surgeryData.patientName.replace(/\s+/g, '')}`
  }
  
  return telegramMessage
}

/**
 * Agendar notifica√ß√µes autom√°ticas para uma cirurgia
 */
export async function scheduleSurgeryNotifications(
  surgeryData: SurgeryNotificationData
): Promise<{ success: boolean; error?: string }> {
  try {
    // Calcular data de v√©spera (1 dia antes)
    const surgeryDate = new Date(surgeryData.surgeryDate + 'T00:00:00')
    const reminderDate = new Date(surgeryDate)
    reminderDate.setDate(reminderDate.getDate() - 1)

    // Verificar se a v√©spera j√° passou
    const now = new Date()
    now.setHours(0, 0, 0, 0)

    if (reminderDate >= now) {
      // Agendar notifica√ß√£o de v√©spera
      // Nota: Em um ambiente de produ√ß√£o, isso seria feito com um job scheduler
      console.log(`üìÖ Notifica√ß√£o de v√©spera agendada para: ${reminderDate.toISOString()}`)
    }

    // Agendar follow-ups p√≥s-operat√≥rios (1¬∫, 4¬∫, 7¬∫, 14¬∫ dias)
    const followUpDays = [1, 4, 7, 14]
    for (const day of followUpDays) {
      const followUpDate = new Date(surgeryDate)
      followUpDate.setDate(followUpDate.getDate() + day)
      
      console.log(`üìÖ Follow-up ${day}¬∫ dia agendado para: ${followUpDate.toISOString()}`)
    }

    return { success: true }
  } catch (error) {
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Erro ao agendar notifica√ß√µes',
    }
  }
}